name: build

on:
  workflow_dispatch:
    inputs:
      test_build:
        description: 'Test build'
        required: false
        default: 'false'
        type: choice
        options:
        - true
        - false
      fake_build:
        description: 'Fake build'
        required: false
        default: 'false'
        type: choice
        options:
        - true
        - false
      suffix:
        description: 'TAG suffix'
        required: false
        default: ''
        type: string

env:
  TEST_BUILD: ${{ github.event.inputs.test_build == 'true' }}
  FAKE_BUILD: ${{ github.event.inputs.fake_build == 'true' }}
  TAG_SUFFIX: ${{ github.event.inputs.suffix }}
  REPO_URL: https://github.com/openwrt-xiaomi/dropbear
  REPO_LNK: openwrt-xiaomi/dropbear
  REPO_BRANCH: master
  TAG_PREFIX: v
  TC_DIR: ${{ github.workspace }}/tc
  TC_LNK: https://toolchains.bootlin.com/downloads/releases/toolchains
  TZ: UTC
  BUILD_DATE: unknown
  REPO_DATE: unknown

jobs:
  check:
    runs-on: ubuntu-24.04
    outputs:
      tag: ${{ steps.gh.outputs.tag }}
      date: ${{ steps.gh.outputs.date }}
      sha: ${{ steps.gh.outputs.sha }}
      url: ${{ steps.gh.outputs.url }}
      message: ${{ steps.gh.outputs.message }}
      build_date: ${{ steps.gh.outputs.build_date }}
      build_time: ${{ steps.gh.outputs.build_time }}
      fw_date: ${{ steps.gh.outputs.fw_date }}
      test_build: ${{ env.TEST_BUILD }}
      fake_build: ${{ env.FAKE_BUILD }}
    steps:
      - name: Get repo data via GH API
        id: gh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Tag name from GITHUB_REF_NAME: $GITHUB_REF_NAME"
          echo "Tag name from github.ref_name: ${{ github.ref_name }}"
          BRANCH=$(gh api repos/$REPO_LNK --jq '.default_branch')
          REPO_DATE=$(gh api repos/$REPO_LNK/commits/$BRANCH --jq '.commit.committer.date')
          BUILD_DATE=$( date --utc +'%Y%m%d' )
          BUILD_TIME=$( date --utc +'%H%M' )
          FW_DATE=$( date --utc +'%Y-%m-%d' )
          TAG=$TAG_PREFIX$BUILD_DATE-$BUILD_TIME
          echo "TAG=$TAG" >> $GITHUB_ENV 
          echo "REPO_DATE=$REPO_DATE" >> $GITHUB_ENV
          {
            echo "tag=$TAG"
            echo "date=$(date --utc -d $REPO_DATE +%Y%m%d)"
            echo "sha=$(gh api repos/$REPO_LNK/commits/$BRANCH --jq '.sha[0:7]')"
            echo "url=$(gh api repos/$REPO_LNK/commits/$BRANCH --jq '.html_url')"
            echo "message<<EOF"
            gh api repos/$REPO_LNK/commits/$BRANCH --jq '.commit.message'
            echo EOF
            echo "build_date=$BUILD_DATE"
            echo "build_time=$BUILD_TIME"
            echo "fw_date=$FW_DATE"
          } >> $GITHUB_OUTPUT
  
  build:
    needs: check
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        arch:
          - arm64
          - armv7a
          - armv5
          - mips
        isTestOrFake:
          - ${{ needs.check.outputs.test_build == 'true' || needs.check.outputs.fake_build == 'true' }}
        exclude:
          - { isTestOrFake: true }
    steps:
      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get -qq update
          #sudo apt-get -qq update && sudo apt-get -qq upgrade
          sudo apt-get -qq install build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext
          sudo apt-get -qq install git libncurses5-dev libssl-dev python3-setuptools rsync swig unzip zlib1g-dev
          sudo apt-get -qq install file wget libgmp3-dev libmpfr-dev libmpc-dev 
          sudo apt-get -qq autoremove --purge
          sudo apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"
      
      - name: Checkout sources
        uses: actions/checkout@main
      
      - name: Download Toolchains
        env:
          ARCH: ${{ matrix.arch }}
        run: |
          mkdir -p $TC_DIR
          cd $TC_DIR
          [ $ARCH = arm64  ] && PKG_NAME="aarch64"
          [ $ARCH = armv7a ] && PKG_NAME="armv7-eabihf"
          [ $ARCH = armv5  ] && PKG_NAME="armv5-eabi"
          [ $ARCH = mips   ] && PKG_NAME="mips32el"
          wget $TC_LNK/$PKG_NAME/tarballs/$PKG_NAME--musl--stable-2020.02-2.tar.bz2
          tar -xf $PKG_NAME*.tar.bz2
          TC_DIR=$TC_DIR/$PKG_NAME--musl--stable-2020.02-2
          TARGET_HOST=$( find $TC_DIR -maxdepth 1 -type d -name '*-buildroot-*' | xargs -- basename )
          GCC_PATH=$TC_DIR/bin          
          CROSS_COMPILE=$TC_DIR/bin/$TARGET_HOST-
          echo "TC_DIR=$TC_DIR" >> $GITHUB_ENV
          echo "GCC_PATH=$GCC_PATH" >> $GITHUB_ENV
          echo "TARGET_HOST=$TARGET_HOST" >> $GITHUB_ENV
          echo "CROSS_TOOL=$GCC_PATH/$TARGET_HOST-" >> $GITHUB_ENV
          echo "CROSS_COMPILE=$CROSS_COMPILE" >> $GITHUB_ENV
      
      - name: Build the kernel module
        id: compile
        if: steps.patch.outputs.status == 'success'
        env: 
          ARCH: ${{ matrix.arch }}
        run: |
          echo "############ prepare config ############"
          ./configure --host=$TARGET_HOST --enable-static --disable-zlib --disable-harden \
            --disable-pam --enable-bundled-libtom --enable-openpty --enable-syslog \
            --disable-lastlog --disable-utmpx --disable-utmp --disable-wtmp --disable-wtmpx \
            --disable-loginfunc --disable-pututline --disable-pututxline \
            CC="${CROSS_TOOL}gcc" \
            CFLAGS="-Os -Wl,-static -ffunction-sections -fdata-sections" \
            LDFLAGS="-static -Wl,--gc-sections -Wl,--strip-all"
          echo "############ compile ###################"
          make PROGRAMS="dropbear scp dropbearkey" MULTI=1 STATIC=1
          if [ ! -e "dropbearmulti" ]; then
              echo "ERROR: File dropbearmulti not found!"
              exit 1
          fi
          OUT_DIR=outbin
          mkdir -p $OUT_DIR
          cp -f dropbearmulti $OUT_DIR/
          echo "OUT_DIR=$OUT_DIR" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload OUT directory
        uses: actions/upload-artifact@main
        if: steps.compile.outputs.status == 'success'
        env: 
          ARCH: ${{ matrix.arch }}
        with:
          name: dropbearmulti-${{ env.ARCH }}
          path: ${{ github.workspace }}/${{ env.OUT_DIR }}
          if-no-files-found: error 

  release:
    needs: [ check, build ]
    permissions:
      contents: write
    runs-on: ubuntu-24.04
    strategy:
      max-parallel: 1
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: dropbearmulti-*

      - name: Put images into zip
        env:
          TAG: ${{ needs.check.outputs.tag }}
        run: |
          ls -la
          mkdir -p public
          for XDIR in ./dropbearmulti-*; do
              if [ -d "$XDIR" ]; then
                  NAME=$( basename $XDIR )
                  ARCH=$( echo $NAME | cut -d- -f2 )
                  cp $XDIR/dropbearmulti ./public/dropbearmulti_$ARCH
              fi
          done
          find ./public -type f -name 'dropbearmulti_*' -exec sh -c 'zip -0 ./public/dropbearmulti-$TAG.zip -j {} {}/*' \;

      - name: Upload assets
        uses: andelf/nightly-release@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ needs.check.outputs.tag }}
        with:
          prerelease: false
          tag_name: ${{ needs.check.outputs.tag }}${{ env.TAG_SUFFIX }}
          name: '${{ needs.check.outputs.tag }}'
          body: |
            dropbearmulti for XMiR-Patcher ${{ needs.check.outputs.build_date }}-${{ needs.check.outputs.build_time }}
            author: [remittor](https://github.com/remittor)
          files: ./public/*.zip
